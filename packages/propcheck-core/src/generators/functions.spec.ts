import { fn } from "./functions"
import { makeSeedState } from "../prng"
import { nat } from "./numbers"

describe("Functions", () => {
    describe("functions generated by fn", () => {
        it("should be idempotent", () => {
            const g = fn(nat)

            const f = g.run(100, s0, 0).value
            const a = f({ prop: "string" })
            const b = f(10)
            for (let i = 0; i < 10; ++i) {
                expect(f({ prop: "string" })).toBe(a)
                expect(f(10)).toBe(b)
            }
        })

        it("should yield different values for different inputs", () => {
            const g = fn(nat)

            const f = g.run(100, s0, 0).value

            const outputs = new Array<number>()
            for (let i = 0; i < 20; ++i) {
                outputs.push(f(i))
            }

            for (let i = 0; i < 20; ++i) {
                expect(outputs.some(n => n !== outputs[i])).toBe(true)
            }
        })

        it("should respect the domain size", () => {
            const g = fn(nat, 5)
            const f = g.run(100, s0, 0).value

            const outputs = new Array<number>()
            for (let i = 0; i < 15; ++i) {
                outputs.push(f(i))
            }

            const first = outputs.slice(0, 5)
            const middle = outputs.slice(5, 10)
            const end = outputs.slice(10)

            expect(first).toEqual(middle)
            expect(middle).toEqual(end)
        })
    })
})

const s0 = makeSeedState("functions")
